language: r
warnings_are_errors: true
cran: http://cran.rstudio.com
dist: trusty
addons:
  apt:
    packages:
    - libcurl4-openssl-dev
    - libxml2-dev
    - libfftw3-dev
    - libgsl0-dev
    - libgsl0ldbl
os:
- linux
- osx
osx_image: xcode9.4
services:
- xvfb
r:
- 3.3
- 3.4
- 3.5
- release
- devel
matrix:
  allow_failures:
  - r: devel
env:
  global:
  - R_BUILD_ARGS="--no-manual"
  - R_CHECK_ARGS="--as-cran --install-args=--build"
  - RGL_USE_NULL=TRUE
  - WARNINGS_ARE_ERRORS=1
  - PROJECT_NAME=neuroconductor
  - DISPLAY=:99.0
  - R_REMOTES_NO_ERRORS_FROM_WARNINGS=true
  - _R_CHECK_FORCE_SUGGESTS_=false
before_install:
  - export RGL_USE_NULL=TRUE
  - export PROJ_DIR=`basename $PWD`
  - fname=travis_helpers.sh
  - wget -O ${fname} http://bit.ly/travis_helpers
  - cat ${fname}; source ${fname}; rm ${fname}
  - cat DESCRIPTION
  - export PACKAGE_NAME=`package_name`
  - remove_neuroc_packages
  - export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1
  # does all the clang exports
  - x=`export_clang_cxx`; eval ${x}
  - echo "CC=${CC}, CXX=${CXX}, CXX1X=${CXX1X}"
  - echo "CXX1XSTD=${CXX1XSTD}, CXX11=${CXX11}"
  - clang_cxx
  - export cmake_version="3.11"
  - cmake --version
  - x=`cmake_setup`; echo "${x}"; eval ${x};
  - cmake --version
  - export ants_user=ANTsX
  - echo "Installing Missing Deps ITKR"
  - install_missing_remote_deps stnava/ITKR
  - gh_binary_install stnava/ITKR ;
  - if [[ "${PACKAGE_NAME}" != "ITKR" ]];
    then
      echo "Installing Missing Deps ANTsRCore" ;
      install_missing_remote_deps ${ants_user}/ANTsRCore;
      gh_binary_install ${ants_user}/ANTsRCore ;
    fi
  - if [[ "${PACKAGE_NAME}" != "ANTsRCore" && "${PACKAGE_NAME}" != "ITKR" ]];
    then
      echo "Installing Missing Deps ANTsR" ;
      install_missing_remote_deps ${ants_user}/ANTsR ;
      gh_binary_install ${ants_user}/ANTsR ;
    fi
  - cat DESCRIPTION
  - install_rgl_deps ;  
  - install_remotes_no_dep
  - cat DESCRIPTION
  - echo $PATH ;

after_success:
- dump_logs
after_failure:
- dump_logs
before_deploy:
- if [ "$TRAVIS_OS_NAME" = "osx" ]; then PKG_TARBALL=$(ls -1t *.tgz | head -n 1);
  PKG_TARBALL_WITH_R=`echo $PKG_TARBALL | sed 's/.tgz/_'"R${rver}"'.tgz/'` ; mv ${PKG_TARBALL}
  ${PKG_TARBALL_WITH_R} ; echo "Built tarball is ${PKG_TARBALL_WITH_R}" ; fi
- if [ "$TRAVIS_OS_NAME" = "linux" ]; then PKG_TARBALL=$(ls -1t *.tar.gz | head -n
  1); PKG_TARBALL_WITH_R=`echo $PKG_TARBALL | sed 's/.tar.gz/_'"R${rver}"'.tar.gz/'`
  ; mv ${PKG_TARBALL} ${PKG_TARBALL_WITH_R} ; echo "Built tarball is ${PKG_TARBALL_WITH_R}"
  ; fi
- if [ "$TRAVIS_OS_NAME" = "osx" ]; then rm -f *.tar.gz; fi
deploy:
  provider: releases
  skip_cleanup: true
  file_glob: true
  overwrite: true
  file: "${PACKAGE_NAME}*.t*gz"
  on:
    tags: true
  api-key:
    secure: XgE3OExaHPQzp4q0qSkMGw8GWBxwMKQbOXF3NjJw8SkGn055YBNk4PHDNf2xXJLwDEwMQ0g1UQ/pkNotegqaYDqBKw6osHW7aJevOCMIfUBuQOncBSdMQT0ZNPj0MWXmQozMfMg5OiZqH88WBm/uken8eVKvF0AgRiAXyxJ0pk+JbxJtpoS7hATWRS9sLpUjiG87gWR1QyqP4SkOM55ZGvG0pdutPegHN5N2ALoeNiRw/jdtHXOKwlS45CbLOLrNplEd+ej9K4JT7Q8Ud9+JujJn2pSnvY7u3P+Wa/6fp5yvXZb3Lx/sJHfdlWn/zKPJxS/WTeNLJ/EeETm1DZ/oeZbGdWBPo6BKLbOz5vyqBOuuWPYMLrejSaTPA06TQbEN62sQxVHd3NTBKacy+qjzY8yswuTazd07EgBvUllrIF4dPeIcZ+5j12g70/8t8U+qAEVI25+FYLX2QZbZmK2m9kh4vAjviIWGWMGkV86hUHnph/Oz9rBhYAG/WdtNWk5Wf5iq+TVKj+2FPrRtphiHSBUZhbxNyjmAIOWC6TH0K9uB2SFs+LQfqV+mz+9bErsxOvNEyXy5dHvG+XdMOEL+SblKdBxZtC796mii3eW03SOPsUJLubC7sK4xsWwKgB+PUc1N2/ZFMCdpier7ZZPhXpEXwuBWdC2jnAxbjWZwPig=
after_deploy:
- echo "${PROJECT_NAME}" | grep -q "releases"; if [[ $? -eq 0 ]]; then run_coverage="false";
  else run_coverage=; fi;
- if [[ "${TRAVIS_R_VERSION_STRING}" = "release" ]]; then Rscript -e 'covr::coveralls(type
  = "all", quiet = FALSE)' ; fi

#neuroc.deps version (SHA): a5aa5ca